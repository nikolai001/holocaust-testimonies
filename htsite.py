#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Tue Nov 14 17:23:15 2023@author: nikolai""""""First of all: you should install the following libraries to be able to run the code:    - plotly express.    - Wordcloud    - pyvis.network or just pyvis.    - Dash"""import randomfrom pyvis.network import Networkimport pandas as pdimport dashfrom dash import dash_tablefrom dash.dependencies import Input, Outputfrom dash import dccfrom dash import htmlimport plotly.express as pxfrom wordcloud import WordCloudfrom collections import Counterimport plotly.graph_objs as goapp = dash.Dash(    __name__, external_stylesheets=["https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0"])# data = pd.read_csv('volcanos.csv', encoding='utf-8')data = pd.read_csv('testimonies_clean.csv', encoding='utf-8')coordinateData = pd.read_csv('geoplots.csv', encoding='utf-8')locations = []placeOfBirth = {}ghettos = {}camps = {}pob = data['place_of_birth']ghetto = data['ghetto']camp = data['camps']for place in pob:    if not place in placeOfBirth:        placeOfBirth.update({place: 1})    else:        placeOfBirth.update({place: placeOfBirth[place]+1})for place in ghetto:    if not place in ghettos:        ghettos.update({place: 1})    else:        ghettos.update({place: ghettos[place]+1})for place in camp:    if type(place) == str:        campSplit = place.split(',')        for location in campSplit:            if not location in camps:                camps.update({location: 1})            else:                camps.update({location: camps[location]+1})# placeOfBirth.update({'place_of_birth':0})# ghettos.update({'ghetto':0})# camps.update({'camps':0})# locations.append(placeOfBirth)# locations.append(ghettos)# locations.append(camps)# Convert count dictionaries to DataFrames and create a unified count columnplaces_df = pd.DataFrame(placeOfBirth.items(), columns=['Place', 'count'])places_df['category'] = 'place_of_birth'ghettos_df = pd.DataFrame(ghettos.items(), columns=['Place', 'count'])ghettos_df['category'] = 'ghetto'camps_df = pd.DataFrame(camps.items(), columns=['Place', 'count'])camps_df['category'] = 'camps'# Merge all count DataFrames into a single DataFrameall_counts = pd.concat([places_df, ghettos_df, camps_df])# Merge latitude/longitude data with count data based on 'Place' columnmerged_data = pd.merge(coordinateData, all_counts, on='Place', how='inner')# mintime = data['last_eruption_year'].min()# //500*500-500# maxtime = data['last_eruption_year'].max()# //500*500+500app.layout = html.Main([  html.Div([    dcc.Input(        id="searchInput",        type="text",        style={'border-radius': '80em', 'padding': '12px 0 12px 24px',            'box-shadow': '0px 1px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30)', 'outline': 'none', 'border': 'none', 'grid-row': '1', 'grid-column': '1/-1'},        placeholder="input sentence or one keyword",    ),    html.Button(        children='search',        className='material-symbols-outlined',        id='search',        style={'width': '40px', 'height': '100%', 'outline': 'none', 'border': 'none', 'background-color': 'orange',            'border-radius': '0 88em 88em 0', 'grid-row': '1', 'grid-column': '1/-1', 'justify-self': 'end', 'padding': '0', 'color': 'white'}    )], style={'grid-column': '1/-1', 'width': '80%', 'max-width': '450px', 'display': 'grid', 'grid-template-columns': '1fr', 'justify-content': 'center', 'margin-top': '10px', 'justify-self': 'center'}),  html.Div([      html.H1(children="Protocols",              style={'textAlign': 'right', 'fontfamily': 'fantasy', "font-size": "24px", 'grid-column': '2/3', 'width': '95%', 'grid-row': '1'}),      dcc.Graph(id='map', style={'width': '95%', 'display': 'block',                'margin': '0', 'grid-column': '1/2', 'grid-row': '2'}),      html.Div(id='protocols', style={'width': '95%', 'display': 'block', 'margin': '0', 'grid-column': '2/3',               'aspectRatio': '1/1', 'grid-row': '2', 'overflow': 'scroll', 'align-self': 'center'}),  ], style={'width': '95%', 'display': 'grid', 'grid-column': '1/-1', 'grid-template-columns': '1fr 1fr', 'margin': '25px 0 0 0'}),], style={'display': 'grid', 'grid-template-columns': '1fr 1fr'})@app.callback(    Output(component_id='map', component_property='figure'),    [        Input(component_id='searchInput', component_property='value'),    ])def update_output(searchInput):    mydata = merged_data    if searchInput and len(searchInput) > 0:        mydata = mydata[merged_data['Place'].str.lower() ==                                                       searchInput.lower()]    fig = px.scatter_mapbox(data_frame=mydata,                        lat="Latitude",                        lon="Longitude",                        hover_name="Place",                        color="category",                        size="count",                        size_max=25,                        zoom=0,                        height=700,                        custom_data=[mydata['category']],                        mapbox_style="open-street-map")    fig.update_layout(legend=dict(x=0, y=1.1, orientation='h', traceorder='normal', font=dict(family='sans-serif', size=12, color='black')),         # Adjust top margin to accommodate the legend         margin=dict(l=20, r=20, t=100, b=20),         autosize=True)    return fig@app.callback(Output('protocols', 'children'),              [Input('map', 'clickData')])def update_wiki(click_data):    if click_data:        location = click_data['points'][0]['hovertext']        category = click_data['points'][0]['customdata'][0]        protocols = []        for idx, row in data.iterrows():           places = row[category]           if isinstance(places, str):               locations = places.split(',')               for loc in locations:                   if loc.strip().lower() == location.lower():                       protocol = row['protocol']                       protocols.append(html.P(protocol))               descriptor = html.H4(str(category) + str(' ') + str(location))        return [descriptor] + protocols            # url = "https://en.wikipedia.org/wiki/Volcano"    # if click_data != None:    #     url = "https://en.wikipedia.org/wiki/"+click_data['points'][0]['hovertext'].replace(" ","_")    # return [    #     html.Iframe(src=url,style={'width':'100%','height':'700px','display':'inline-block'})    # ]if __name__ == '__main__':    app.run_server(debug=True, port=8080)