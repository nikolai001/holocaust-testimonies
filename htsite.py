#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Tue Nov 14 17:23:15 2023@author: nikolai""""""First of all: you should install the following libraries to be able to run the code:         - plotly express.    - Wordcloud    - pyvis.network or just pyvis.     - Dash     """import randomfrom pyvis.network import Networkimport pandas as pdimport dashfrom dash import dash_tablefrom dash.dependencies import Input, Outputfrom dash import dccfrom dash import htmlimport plotly.express as pxfrom wordcloud import WordCloudfrom collections import Counterimport plotly.graph_objs as goapp = dash.Dash(__name__, external_stylesheets = ["https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0"])# data = pd.read_csv('volcanos.csv', encoding='utf-8')data = pd.read_csv('geoplots.csv', encoding='utf-8')pob = data['place_of_birth'].unique()# mintime = data['last_eruption_year'].min()#//500*500-500# maxtime = data['last_eruption_year'].max()#//500*500+500app.layout = html.Main([                                                 html.Div([                   dcc.Input(                       id="searchInput",                       type="text",                       style={'border-radius':'80em','padding':'12px 0 12px 24px','box-shadow':'0px 1px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30)','outline':'none','border':'none','grid-row':'1','grid-column':'1/-1'},                       placeholder="input sentence or one keyword",                   ),                   html.Button(                       children = 'search',                       className = 'material-symbols-outlined',                       id = 'search',                       style={ 'width':'40px','height':'100%','outline':'none','border':'none','background-color':'orange','border-radius':'0 88em 88em 0','grid-row':'1','grid-column':'1/-1','justify-self':'end','padding':'0', 'color':'white'}                   )                ],style={'grid-column':'1/-1','width':'80%','max-width':'450px','display':'grid','grid-template-columns':'1fr','justify-content':'center','margin-top':'10px','justify-self':'center'}),                                                   html.Div([                     html.H1(children="Protocols",                             style = {'textAlign':'right', 'fontfamily' : 'fantasy', "font-size": "24px", 'grid-column':'2/3','width':'95%','grid-row':'1'}),                     html.Div ([                        html.Div([                            html.Div(id='bornAt', style={'display':'block','width':'2%','max-width':'15px','aspect-ratio':'1/1','border-radius':'100em','background-color':'green','align-self':'center','margin':'0 10px 0 0'}),                             html.P(children='Born at', style={'margin':'0'}),                        ],style={'display':'flex'}),                                                html.Div([                            html.Div(id='ghettoAt', style={'display':'block','width':'2%','max-width':'15px','aspect-ratio':'1/1','border-radius':'100em','background-color':'orange','align-self':'center','margin':'0 10px 0 0'}),                             html.P(children='Ghetto', style={'margin':'0'}),                        ],style={'display':'flex'}),                                                html.Div([                            html.Div(id='internedAt', style={'display':'block','width':'2%','max-width':'15px','aspect-ratio':'1/1','border-radius':'100em','background-color':'red','align-self':'center','margin':'0 10px 0 0'}),                             html.P(children='Camp', style={'margin':'0'}),                        ],style={'display':'flex'}),                                                ],id='legend',style={'width':'95%','display':'flex','flex-direction':'column','margin':'0 0 0 auto','justify-content':'space-between','grid-column':'1/2'}),                     dcc.Graph(id='map', style={'width':'95%','display':'block','margin':'0','grid-column':'1/2','aspect-ratio':'1/1'}),                     html.Div(id='protocols',style={'width':'95%','display':'block','margin':'0','grid-column':'2/3','aspect-ratio':'1/1'}),                 ],style={'width':'95%','display':'grid','grid-column':'1/-1','grid-template-columns':'1fr 1fr','margin':'25px 0 0 0'}),                                                    ],style={'display':'grid','grid-template-columns':'1fr 1fr'})@app.callback(    Output(component_id='map', component_property='figure'),    [        Input(component_id='searchInput', component_property='value'),    ])def update_output(searchInput):    mydata = data        # mydata = mydata[mydata['last_eruption_year'] >= volcano_date[0]]        # mydata = mydata[mydata['last_eruption_year'] <= volcano_date[1]]    if searchInput and len(searchInput) > 0:        mydata = data[data['place_of_birth'].str.lower() == searchInput.lower()]    fig = px.scatter_mapbox(data_frame=mydata ,                         lat="place_of_birth1latitude",                        lon="place_of_birth1longitude",                        hover_name="place_of_birth",                        color_discrete_sequence= ["green"],                        # hover_data=["primary_volcano_type","tectonic_settings"],                        size=[1 for i in mydata['place_of_birth']],                        size_max=10,                        zoom=0,                        height=700,                        mapbox_style="open-street-map")    fig.update_layout(margin={"r":0,"t":0,"l":20,"b":0})    return fig@app.callback(Output('protocols','children'),              [Input('map','clickData')])def update_wiki(click_data):    url = "https://en.wikipedia.org/wiki/Volcano"    if click_data != None:        url = "https://en.wikipedia.org/wiki/"+click_data['points'][0]['hovertext'].replace(" ","_")    return [        html.Iframe(src=url,style={'width':'100%','height':'700px','display':'inline-block'})    ]if __name__ == '__main__':    app.run_server(debug=True, port=8080)